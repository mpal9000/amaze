{"version":3,"sources":["../../../src/grid/cells/index.js"],"names":[],"mappings":";;;;;;;;;;;qBAmBwB,KAAK;;2BAfb,eAAe;;;;oCACN,wBAAwB;;;;wBAC5B,UAAU;;;;8BACZ,kBAAkB;;;;4BACpB,gBAAgB;;;;uBACX,SAAS;;;;oBAEd,YAAY;;;;AAE7B,IAAM,OAAO,GAAG,8DAAuB,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;;;;;AAMpC,SAAS,KAAK,GAAG;AAC9B,SAAO,IAAI,CAAC;CACb;;;;;;;AAOD,IAAM,SAAS,GAAG,OAAO,CAAC,UAAC,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,SAAS,EAAK;AACvE,SAAO,EAAE,KAAK,EAAL,KAAK,EAAE,MAAM,EAAN,MAAM,EAAE,eAAe,EAAf,eAAe,EAAE,SAAS,EAAT,SAAS,EAAE,CAAC;CACtD,CAAC,CAAC;;AAEH,KAAK,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,IAAuE,EAAE;MAAvE,OAAO,GAAT,IAAuE,CAArE,OAAO;oBAAT,IAAuE,CAA5D,MAAM;MAAN,MAAM,+BAAG,CAAC;MAAE,KAAK,GAA5B,IAAuE,CAAhD,KAAK;MAAE,WAAW,GAAzC,IAAuE,CAAzC,WAAW;MAAE,eAAe,GAA1D,IAAuE,CAA5B,eAAe;MAAE,SAAS,GAArE,IAAuE,CAAX,SAAS;;AAClG,MAAM,SAAS,GAAG,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,MAAM,CAAC;;AAE7C,MAAM,UAAU,GAAG,SAAb,UAAU,CAAG,IAAI;WAAI,qBAAG,OAAO,CACnC,kBAAK,MAAM,EACX,IAAI,EACJ,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,eAAe,EAAE,SAAS,CAAC,EACxD,sBAAsB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAChD;GAAA,CAAC;AACF,MAAM,WAAW,GAAG,8BAAI,UAAU,CAAC,CAAC;;AAEpC,SAAO,gBACL,wBAAwB,EACxB,EAAE,KAAK,EAAE,EAAE,OAAO,EAAK,MAAM,GAAG,CAAC,MAAG,EAAE,EAAE,EACxC,WAAW,CAAC,iCAAO,KAAK,CAAC,CAAC,CAC3B,CAAC;CACH,CAAC;;;;;;AAMF,IAAM,kBAAkB,GAAG,+BAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AACjD,IAAM,oBAAoB,GAAG,OAAO,CAAC,UAAA,UAAU,EAAI;AACjD,SAAO,8BAAI,kBAAkB,EAAE,UAAU,CAAC,CAAC;CAC5C,CAAC,CAAC;;;;AAIH,IAAM,kBAAkB,GAAG,EAAE,CAAC;;AAE9B,SAAS,sBAAsB,CAAC,WAAW,EAAE,KAAK,EAAE;AAClD,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AACtC,SAAO,UAAU,GACb,oBAAoB,CAAC,UAAU,CAAC,GAChC,kBAAkB,CAAC;CACxB","file":"index.js","sourcesContent":["/**\n * Module dependencies\n */\n\nimport map from 'ramda/src/map';\nimport partialRight from 'ramda/src/partialRight';\nimport _memoize from 'memoizee';\nimport values from 'ramda/src/values';\nimport pick from 'ramda/src/pick';\nimport hg, { h } from 'mercury';\n\nimport Cell from '../../cell';\n\nconst memoize = partialRight(_memoize, { max: 1 });\n\n/**\n * Component\n */\n\nexport default function Cells() {\n  return null;\n}\n\n/**\n * Render component.\n */\n\n// TODO: Check if need a `key` prop\nconst cellProps = memoize((width, margin, checkReadyState, isStarted) => {\n  return { width, margin, checkReadyState, isStarted };\n});\n\nCells.render = function render({ columns, margin = 0, cells, botsByIndex, checkReadyState, isStarted }) {\n  const cellWidth = 100 / columns - 2 * margin; // percent\n\n  const renderCell = cell => hg.partial(\n    Cell.render,\n    cell,\n    cellProps(cellWidth, margin, checkReadyState, isStarted),\n    getBotIndicatorsOfCell(botsByIndex, cell.index)\n  );\n  const renderCells = map(renderCell);\n\n  return h(\n    '.amaze-Grid-cells.u-cf',\n    { style: { padding: `${margin / 2}%` } },\n    renderCells(values(cells))\n  );\n};\n\n/**\n *\n */\n\nconst extractBotIdentity = pick(['id', 'color']);\nconst extractBotIndicators = memoize(botsOnCell => {\n  return map(extractBotIdentity, botsOnCell);\n});\n// We need the same array reference in case there are\n// no bot indicators on a cell, in order to render only\n// the \"changed\" cells via `hg.partial()`\nconst emptyBotIndicators = [];\n\nfunction getBotIndicatorsOfCell(botsByIndex, index) {\n  const botsOnCell = botsByIndex[index];\n  return botsOnCell\n    ? extractBotIndicators(botsOnCell)\n    : emptyBotIndicators;\n}\n"]}