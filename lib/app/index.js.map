{"version":3,"sources":["../../src/app/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Module dependencies\n */\n\nimport { setImmediate } from 'timers';\nimport raf from 'raf';\nimport keys from 'ramda/src/keys';\nimport values from 'ramda/src/values';\nimport forEach from 'ramda/src/forEach';\nimport find from 'ramda/src/find';\nimport filter from 'ramda/src/filter';\nimport times from 'ramda/src/times';\nimport partial from 'ramda/src/partial';\nimport partialRight from 'ramda/src/partialRight';\nimport _memoize from 'memoizee';\nimport defaultTo from 'ramda/src/defaultTo';\nimport hg, { h } from 'mercury';\nimport MainLoop from 'mainloop.js';\n\nimport { randomIntFromRange, ln } from '../util';\nimport dragEventsSetup from '../drag-events/setup';\nimport Bot from '../bot';\nimport Board from '../board';\nimport Cell from '../cell';\n\nconst memoize = partialRight(_memoize, { max: 1 });\n\n/**\n *\n */\n\nconst defaultDimension = defaultTo(20);\nconst defaultMargin = defaultTo(0.5);\n\n/**\n * Component\n */\n\nexport default function App(opts) {\n  const { undo, redo } = opts;\n  const rows = defaultDimension(opts.rows);\n  const columns = defaultDimension(opts.columns);\n  const margin = defaultMargin(opts.margin);\n  const maxWinners = opts.maxWinners || 3;\n  let winners = [];\n  let _hasFinished = false;\n  let startTime = null;\n  let pauseTime = null;\n\n  assertRows(rows);\n  assertColumns(columns);\n\n  const cells = createCells();\n\n  const { listenTo, unlistenTo } = dragEventsSetup();\n\n  const botIdentity = Bot.createIdentity();\n\n  MainLoop\n  // Values below `1000 / 144` are discouraged and\n  // below `1000 / 240` are strongly discouraged\n  .setSimulationTimestep(500)\n  .setUpdate(update)\n  .setDraw(draw)\n  .setEnd(end);\n\n  const state = hg.state({\n    rows: hg.value(rows),\n    columns: hg.value(columns),\n    margin: hg.value(margin), // percent\n    cells: hg.varhash(cells),\n    bots: hg.varhash({}),\n    botIdentity: hg.value(botIdentity),\n    fps: hg.value(0), // Used only in development\n    isReady: hg.value(false),\n    isStarted: hg.value(false),\n    isRunning: hg.value(false),\n    isCellEnabled: hg.value(isCellEnabled),\n    isDraggingEnabled: hg.value(false),\n    start: hg.value(start),\n    pause: hg.value(pause),\n    reset: hg.value(reset),\n    getWinners: hg.value(getWinners),\n    enableDragEvents: hg.value(enableDragEvents),\n    disableDragEvents: hg.value(disableDragEvents),\n    board: Board({ undo, redo }),\n    channels: {\n      onStart, onPause, onReset,\n      addBotRandomly,\n      checkReadyState,\n    },\n  });\n\n  function createCells() {\n    // TODO: Check if can pass `onAddBot()` via `props` on `render()`\n    const cell = partialRight(partial(Cell, columns), onAddBot);\n    const cells = times(cell, rows * columns);\n    return cells;\n  }\n\n  function start(cb) {\n    console.log('start()');\n    setImmediate(() => {\n      const disableDragEvents = state.disableDragEvents();\n      disableDragEvents();\n\n      MainLoop.start();\n\n      setImmediate(() => {\n        raf(() => {\n          // The loop should have started by now\n          if (startTime === null) {\n            startTime = new Date().getTime();\n          }\n\n          else if (pauseTime !== null) {\n            startTime += new Date().getTime() - pauseTime;\n            pauseTime = null;\n          }\n\n          // state.isRunning.set(MainLoop.isRunning());\n          state.isRunning.set(true);\n          state.isStarted.set(true);\n\n          if (cb) cb();\n        });\n      });\n    });\n  }\n\n  function pause(cb) {\n    setImmediate(() => {\n      raf(() => {\n        MainLoop.stop();\n\n        pauseTime = new Date().getTime();\n\n        // state.isRunning.set(MainLoop.isRunning());\n        state.isRunning.set(false);\n        state.fps.set(0);\n\n        if (cb) cb();\n      });\n    });\n  }\n\n  function reset(cb) {\n    pause(() => {\n      winners = [];\n      _hasFinished = false;\n      startTime = null;\n      pauseTime = null;\n\n      // TODO: See https://github.com/nrw/observ-varhash/issues/15 for\n      // comments related to transactions, ie. bulk updates\n      forEach(state.bots.delete, keys(state.bots));\n\n      // TODO: See https://github.com/nrw/observ-varhash/issues/15 for\n      // comments related to transactions, ie. bulk updates\n      const nextCells = createCells();\n\n      forEach(\n        idx => state.cells.put(idx, nextCells[idx], state.cells),\n        keys(state.cells)\n      );\n\n      state.isReady.set(false);\n      state.isStarted.set(false);\n\n      const enableDragEvents = state.enableDragEvents();\n      enableDragEvents();\n\n      if (cb) cb();\n    });\n  }\n\n  function isCellEnabled(index) {\n    return state.cells.get(index).isEnabled()();\n  }\n\n  function onAddBot(spec) {\n    registerBot(state, spec);\n  }\n\n  // TODO: Consider to `memoize()` this function,\n  // but we need to cleen the cache after the game has finished,\n  // ie. inside `reset()`\n  function isWinner(bot) {\n    return !!find(({ id }) => bot.id() === id, winners);\n  }\n\n  function getWinners() {\n    return winners.length ? winners : null;\n  }\n\n  function hasGameFinished() {\n    if (_hasFinished) return true;\n\n    const totalBots = keys(state.bots).length;\n    const totalWinners = winners.length;\n\n    const hasFinished = totalWinners > 0\n      && (totalWinners === totalBots\n          || totalWinners === maxWinners\n          || totalWinners === totalBots - 1);\n\n    if (hasFinished) _hasFinished = true;\n\n    return hasFinished;\n  }\n\n  function enableDragEvents() {\n    if (state.isDraggingEnabled()) return;\n    listenTo();\n    state.isDraggingEnabled.set(true);\n  }\n\n  function disableDragEvents() {\n    if (!state.isDraggingEnabled()) return;\n    unlistenTo();\n    state.isDraggingEnabled.set(false);\n  }\n\n  function update() {\n    // Game has finished, do nothing\n    if (hasGameFinished()) return;\n\n    const currTime = new Date().getTime();\n\n    forEach(bot => {\n      // Bot is a winner, do nothing\n      if (isWinner(bot)) return;\n\n      const prevIndex = bot.prevIndex;\n      const index = bot.index();\n      const move = bot.move();\n      const nextIndex = move(prevIndex, index);\n\n      if (nextIndex !== index) {\n        if (prevIndex !== index) {\n          bot.prevIndex = index;\n        }\n\n        bot.nextIndex = nextIndex;\n\n        // Bot won\n        if (state.cells.get(nextIndex).isExit()\n            && !hasGameFinished()) {\n          winners.push({\n            id: bot.id(),\n            time: currTime - startTime,\n          });\n        }\n      }\n    }, values(state.bots));\n  }\n\n  function draw() {\n    forEach(bot => {\n      if (bot.nextIndex !== bot.index()) {\n        // TODO: If we leave `row` and `col` properties inside\n        // `Bot()` instances, we need to update them too here\n        bot.index.set(bot.nextIndex);\n      }\n    }, values(state.bots));\n  }\n\n  // TODO: Do that only in development (use \"envify\" for \"browserify\")\n  function end(fps, panic) {\n    if (hasGameFinished()) {\n      pause();\n      return;\n    }\n\n    state.fps.set(Number.parseInt(fps));\n\n    if (panic) {\n      // This pattern introduces non-deterministic behaviour,\n      // but in this case it's better than the alternative (the application\n      // would look like it was running very quickly until the simulation\n      // caught up to real time). See the documentation for\n      // `MainLoop.setEnd()` for additional explanation.\n      const discardedTime = Math.round(MainLoop.resetFrameDelta());\n      /*eslint-disable no-console*/\n      console.warn(ln`\n        Main loop panicked, probably because the browser tab\n        was put in the background. Discarding ${discardedTime}ms\n      `);\n      /*eslint-enable no-console*/\n    }\n  }\n\n  return state;\n}\n\n/**\n * Render component.\n */\n\nconst boardProps = memoize((columns, margin, cells, bots, botIdentity, isReady, isRunning, winners, onStart, onPause, onReset, addBotRandomly, checkReadyState, isStarted) => {\n  return {\n    columns, margin, cells,\n    bots, botIdentity,\n    isReady, isRunning, winners,\n    onStart, onPause, onReset,\n    addBotRandomly,\n    checkReadyState, isStarted,\n  };\n});\n\nApp.render = function render(state) {\n  const { isRunning, isDraggingEnabled, enableDragEvents, channels } = state;\n  const winners = isRunning ? null : state.getWinners();\n\n  return h(\n    'section.amaze-App',\n    {\n      'ev-hook': new Hook({\n        isRunning,\n        isDraggingEnabled,\n        enableDragEvents,\n      }),\n    },\n    [\n      hg.partial(Board.render, state.board, boardProps(\n        state.columns, state.margin, state.cells,\n        state.bots, state.botIdentity,\n        state.isReady, isRunning, winners,\n        channels.onStart, channels.onPause, channels.onReset,\n        channels.addBotRandomly,\n        channels.checkReadyState, state.isStarted\n      )),\n\n      // TODO: Do that only in development (use \"envify\" for \"browserify\")\n      // hg.partial(renderFps, state.fps), //DEV-ONLY/\n    ]\n  );\n}\n\n/**\n *\n */\n\nfunction Hook(opts) {\n  Object.assign(this, opts);\n}\n\nHook.prototype.hook = function hook() {\n  if (this.isDraggingEnabled || this.isRunning) return;\n\n  setImmediate(() => {\n    // DOM element will be in the real DOM by now\n    this.enableDragEvents();\n  });\n};\n\n/**\n *\n */\n\nfunction addBotRandomly(state, _spec) {\n  const isEntryCell = cell => cell.isEntry();\n  const filterEntryCells = filter(isEntryCell)\n  const entryCells = filterEntryCells(values(state.cells))\n\n  if (!entryCells.length) return;\n\n  const randIndex = randomIntFromRange(0, entryCells.length - 1);\n  const index = entryCells[randIndex].index();\n\n  // TODO: Check if it's better to not store `row` and `col`,\n  // inside `Bot` instance\n  const spec = Object.assign({}, _spec, { index });\n\n  registerBot(state, spec);\n}\n\n/**\n *\n */\n\nfunction registerBot(state, spec) {\n  state.bots.put(spec.id, Bot(\n    state.rows(),\n    state.columns(),\n    state.isCellEnabled(),\n    spec\n  ));\n\n  state.botIdentity.set(Bot.createIdentity());\n\n  checkReadyState(state);\n}\n\n/**\n *\n */\n\nfunction checkReadyState(state) {\n  if (keys(state.bots).length\n      && exitCellsExist(state)\n      /*&& !state.isReady()*/) {\n    state.isReady.set(true);\n  }\n\n  else {\n    state.isReady.set(false);\n  }\n}\n\n/**\n *\n */\n\nfunction exitCellsExist(state) {\n  return !!find(cell => cell.isExit(), values(state.cells))\n}\n\n/**\n *\n */\n\nfunction onStart(state) {\n  const start = state.start();\n  start();\n}\n\n/**\n *\n */\n\nfunction onPause(state) {\n  const pause = state.pause();\n  pause();\n}\n\n/**\n *\n */\n\nfunction onReset(state) {\n  const reset = state.reset();\n  reset();\n}\n\n/**\n * Used only in development.\n */\n\nfunction renderFps(fps) {\n  return h('section.amaze-App-fpsMeter', `${fps} FPS`);\n}\n\n/**\n *\n */\n\nfunction assertRows(rows) {\n  if (rows != null && (!Number.isInteger(rows) || rows < 1)) {\n    throw new TypeError(ln(\n      `Invalid \"rows\" option,\n      expected positive integer\n      (got ${rows} :: ${typeof rows})`\n    ));\n  }\n\n  return true;\n}\n\n/**\n *\n */\n\nfunction assertColumns(columns) {\n  if (columns != null && (!Number.isInteger(columns) || columns < 1)) {\n    throw new TypeError(ln(\n      `Invalid \"columns\" option,\n      expected positive integer\n      (got ${columns} :: ${typeof columns}))`\n    ));\n  }\n\n  return true;\n}\n"]}