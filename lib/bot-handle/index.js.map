{"version":3,"sources":["../../src/bot-handle/index.js"],"names":[],"mappings":";;;;;;;;;;;;;qBAcwB,SAAS;;0BAVlB,YAAY;;;;uBACL,SAAS;;;;wBAED,aAAa;;gCACd,uBAAuB;;;;;;;;AAMrC,SAAS,SAAS,GAAG;AAClC,SAAO,qBAAG,KAAK,CAAC;AACd,aAAS,EAAE,qBAAG,KAAK,CAAC,KAAK,CAAC;AAC1B,YAAQ,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE;GACrB,CAAC,CAAC;CACJ;;;;;;AAMD,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE;MACvC,SAAS,GAAe,KAAK,CAA7B,SAAS;MAAE,QAAQ,GAAK,KAAK,CAAlB,QAAQ;MACnB,WAAW,GAA+B,KAAK,CAA/C,WAAW;MAAE,cAAc,GAAe,KAAK,CAAlC,cAAc;MAAE,QAAQ,GAAK,KAAK,CAAlB,QAAQ;;AAE7C,SAAO,gBACL,kBAAkB,EAClB,gBAAE,KAAK,EAAE,eAAc;AACrB,SAAK,EAAE,wCAAwC;AAC/C,aAAS,EAAE,CAAC,QAAQ;AACpB,aAAS,EAAE,6BAAG;AACZ,iCAA2B,EAAE,IAAI;AACjC,2CAAqC,EAAE,QAAQ;AAC/C,0CAAoC,EAAE,SAAS;KAChD,CAAC;AACF,SAAK,EAAE;AACL,qBAAe,WAAS,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,MAAG;KACpD;GACF,EAAE,CAAC,QAAQ,GAAG;AACb,cAAU,EAAE,CACV,mCAAiB,QAAQ,CAAC,MAAM,EAAE,EAAE,WAAW,EAAX,WAAW,EAAE,CAAC,EAClD,6BAAc,cAAc,EAAE,eAAc,EAAE,EAAE,WAAW,CAAC,CAAC,CAC9D;GACF,GAAG,EAAE,CAAC,CAAC,CACT,CAAC;CACH,CAAA;;;;;;AAMD,SAAS,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE;AAC3B,UAAQ,IAAI,CAAC,IAAI;AACf,SAAK,WAAW;AAAE,aAAO,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAAA;AAElD,SAAK,SAAS;AAAE,aAAO,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAAA;GAE/C;CACF;;;;;;AAMD,SAAS,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE;AAChC,OAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;AAE1B,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxD,MAAI,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;CACzD;;;;;;AAMD,SAAS,SAAS,CAAC,KAAK,EAAE;AACxB,OAAK,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;CAC5B","file":"index.js","sourcesContent":["/**\n * Module dependencies\n */\n\nimport cx from 'classnames';\nimport hg, { h } from 'mercury';\n\nimport { sendDoubleTap } from '../gestures';\nimport dragSourceEvents from '../drag-events/source';\n\n/**\n * Component\n */\n\nexport default function BotHandle() {\n  return hg.state({\n    isDragged: hg.value(false),\n    channels: { onDrag },\n  });\n}\n\n/**\n * Render component.\n */\n\nBotHandle.render = function render(state, props) {\n  const { isDragged, channels } = state;\n  const { botIdentity, addBotRandomly, disabled } = props;\n\n  return h(\n    '.amaze-BotHandle',\n    h('div', Object.assign({\n      title: 'Drag in or double tap to add a new Bot',\n      draggable: !disabled,\n      className: cx({\n        'amaze-BotHandle-draggable': true,\n        'amaze-BotHandle-draggable--disabled': disabled,\n        'amaze-BotHandle-draggable--dragged': isDragged,\n      }),\n      style: {\n        backgroundColor: `rgb(${botIdentity.color.join()})`,\n      },\n    }, !disabled ? {\n      'ev-event': [\n        dragSourceEvents(channels.onDrag, { botIdentity }),\n        sendDoubleTap(addBotRandomly, Object.assign({}, botIdentity)),\n      ],\n    } : {}))\n  );\n}\n\n/**\n *\n */\n\nfunction onDrag(state, data) {\n  switch (data.type) {\n    case 'dragstart': return onDragstart(state, data);\n    // case 'drag': return _onDrag(state, data);\n    case 'dragend': return onDragend(state, data);\n    // no default\n  }\n}\n\n/**\n *\n */\n\nfunction onDragstart(state, data) {\n  state.isDragged.set(true);\n\n  const dataToTransfer = JSON.stringify(data.botIdentity);\n  data.dataTransfer.setData('text/plain', dataToTransfer);\n}\n\n/**\n *\n */\n\nfunction onDragend(state) {\n  state.isDragged.set(false);\n}\n"]}